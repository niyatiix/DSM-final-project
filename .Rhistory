data = employee_factor,
ntree = 300)
rf_importance2 <- importance(rf_model2)
view(rf_importance2)
plot(rf_model)
plot(rf_model2)
# gradient Boosting
gbm_model <- gbm(Overall_SatisfactionScore ~ .,
data = train,
n.trees = 500,
interaction.depth = 3)
# now using k-fold cross validation and applying to tree and forest
cv.error.10 <- rep(0,10)
?trainControl
??trainControl
ctrl <- trainControl(method = "cv", number = 5)  # 5-fold cross-validation
?cv.glm
for (i in 1:10){
fit_tree <- tree(Overall_SatisfactionScore ~ .,data=employee_factor)
cv.error.10[i] <- cv.glm(employee_factor,glm.fit,K=10)$delta[1]
}
# set seed for reproducibility
set.seed(5432)
# now using bootstrapping and applying to tree and forest
n_iterations <- 1000
model_list <- list()
bootstrap_sample <- train_data[sample(nrow(employee_factor), replace = TRUE), ]
bootstrap_sample <- trainx[sample(nrow(employee_factor), replace = TRUE), ]
bootstrap_sample <- train[sample(nrow(employee_factor), replace = TRUE), ]
for (i in 1:n_iterations) {
bootstrap_sample <- train[sample(nrow(employee_factor), replace = TRUE), ]
model <- randomForest(Overall_SatisfactionScore ~ ., data = bootstrap_sample, ntree = 500)
model_list[[i]] <- model
}
# load in data
employee <- read.csv("employee_dataset.csv", sep = ";")
## UNDERSTANDING VARIABLE OF INTEREST
# see how many of each satisfaction score
employee %>%
group_by(Overall_SatisfactionScore) %>%
count()
# filtering out passive responses
employee <- employee %>%
filter(Overall_SatisfactionScore == 'Detractor' |
Overall_SatisfactionScore == 'Promoter')
# change data to factors
employee_factor <- employee %>%
mutate_if(is.character,as.factor)
summary(employee_factor)
glimpse(employee_factor)
# change our variable of interest into a dummy
employee$Overall_SatisfactionScore <-
ifelse(employee$Overall_SatisfactionScore == "Promoter", 1, 0)
# changing gender to dummy
employee$Gender <- ifelse(employee$Gender == "Male", 1, 0)
# one hot encode department, travel type, education data
employee <- cbind(employee[, -which(names(employee) == 'Department')],
model.matrix(~Department-1, employee))
employee <- cbind(employee[, -which(names(employee) == 'Traveltype_last_year')],
model.matrix(~Traveltype_last_year-1, employee))
employee <- cbind(employee[, -which(names(employee) == 'EducationType')],
model.matrix(~EducationType-1, employee))
# creating new ordered numerical variables for marital, education
# reviews & satisfaction scores
employee <- employee %>%
mutate(Education = case_when(
Education == "Under Graduation" ~ 1,
Education == "Graduation" ~ 2,
Education == "Masters / PHD" ~ 3,
),
MaritalStatus = case_when(
MaritalStatus == "Single" ~ 1,
MaritalStatus == "Married" ~ 2,
MaritalStatus == "Divorced" ~ 3,
),
Potential_Review = case_when(
PotentialReview == "Low" ~ 1,
PotentialReview == "Medium" ~ 2,
PotentialReview == "High" ~ 3,
PotentialReview == "Very High" ~ 4
),
Performance_Review = case_when(
PerformanceReview == "Inconsistent" ~ 1,
PerformanceReview == "Met Expectations" ~ 2,
PerformanceReview == "Exceed Expectations" ~ 3
),
Satisfaction_Score = case_when(
SatisfactionScore == "Detractor" ~ 1,
SatisfactionScore == "Passive" ~ 2,
SatisfactionScore == "Promoter" ~ 3
),
Job_Role_Satisfaction_Score = case_when(
JobRole_SatisfactionScore == "Detractor" ~ 1,
JobRole_SatisfactionScore == "Passive" ~ 2,
JobRole_SatisfactionScore == "Promoter" ~ 3
))
# removing unnecessary variables
employee <- employee %>%
select(-EmployeeID, -PotentialReview, -PerformanceReview, -SatisfactionScore,
-JobRole_SatisfactionScore)
summary(employee)
glimpse(employee)
# check this has worked
sum(is.na(employee))
# moving overall satisfaction score to beginning of dataset
employee <- employee %>%
relocate(Overall_SatisfactionScore)
# minor cleaning -- removing variables due to plots & nature of study
employee <- employee %>%
select(-`EducationTypeBio-technology`, -EducationTypeEconomics,
-`EducationTypeMarketing / Finance`, -`EducationTypePhycology / Behavior Sciences`,
-MaritalStatus)
employee_factor <- employee_factor %>%
select(-EmployeeID, -Education, -EducationType, -MaritalStatus)
# set seed for reproducibility
set.seed(5432)
# 70% of data randomly sampled into training
train_index <- sample(nrow(employee_factor), 0.7 * nrow(employee_factor))
# creating train & test subset
train <- employee_factor[train_index, ]
test <- employee_factor[-train_index, ]
# decision tree
tree_model <- tree(Overall_SatisfactionScore ~ ., data = train)
tree_model2 <- tree(Overall_SatisfactionScore ~ ., data = employee_factor)
# decision tree summary & plot
summary(tree_model)
plot(tree_model)
text(tree_model, pretty = 0)
summary(tree_model2)
plot(tree_model2)
text(tree_model2, pretty = 0)
# random forest
rf_model <- randomForest(Overall_SatisfactionScore ~ .,
data = train,
ntree = 300)
rf_model2 <- randomForest(Overall_SatisfactionScore ~ .,
data = employee_factor,
ntree = 300)
# random forest summary & plot
rf_importance <- importance(rf_model)
view(rf_importance)
# now using bootstrapping and applying to tree and forest
n_iterations <- 1000
model_list <- list()
for (i in 1:n_iterations) {
bootstrap_sample <- train[sample(nrow(employee_factor), replace = TRUE), ]
model <- randomForest(Overall_SatisfactionScore ~ ., data = bootstrap_sample, ntree = 500)
model_list[[i]] <- model
}
# Feature importance based on randomForest models
feature_importance <- varImpList(model_list)
library(randomForest)
library(boot)
## Housekeeping
pacman::p_load(MASS, tidyverse)
## Load the train and test datasets
train <- read.csv("train.csv")
# load libraries
library(dplyr)
library(tidyverse)
library(gridExtra)      # for boxplot arrangement
library(reshape2)       # for correlation plot
library(tree)
library(randomForest)
library(boot)
library(gbm)
# load in data
employee <- read.csv("employee_dataset.csv", sep = ";")
## UNDERSTANDING VARIABLE OF INTEREST
# see how many of each satisfaction score
employee %>%
group_by(Overall_SatisfactionScore) %>%
count()
# filtering out passive responses
employee <- employee %>%
filter(Overall_SatisfactionScore == 'Detractor' |
Overall_SatisfactionScore == 'Promoter')
# change data to factors
employee_factor <- employee %>%
mutate_if(is.character,as.factor)
summary(employee_factor)
glimpse(employee_factor)
# change our variable of interest into a dummy
employee$Overall_SatisfactionScore <-
ifelse(employee$Overall_SatisfactionScore == "Promoter", 1, 0)
# changing gender to dummy
employee$Gender <- ifelse(employee$Gender == "Male", 1, 0)
# one hot encode department, travel type, education data
employee <- cbind(employee[, -which(names(employee) == 'Department')],
model.matrix(~Department-1, employee))
employee <- cbind(employee[, -which(names(employee) == 'Traveltype_last_year')],
model.matrix(~Traveltype_last_year-1, employee))
employee <- cbind(employee[, -which(names(employee) == 'EducationType')],
model.matrix(~EducationType-1, employee))
# creating new ordered numerical variables for marital, education
# reviews & satisfaction scores
employee <- employee %>%
mutate(Education = case_when(
Education == "Under Graduation" ~ 1,
Education == "Graduation" ~ 2,
Education == "Masters / PHD" ~ 3,
),
MaritalStatus = case_when(
MaritalStatus == "Single" ~ 1,
MaritalStatus == "Married" ~ 2,
MaritalStatus == "Divorced" ~ 3,
),
Potential_Review = case_when(
PotentialReview == "Low" ~ 1,
PotentialReview == "Medium" ~ 2,
PotentialReview == "High" ~ 3,
PotentialReview == "Very High" ~ 4
),
Performance_Review = case_when(
PerformanceReview == "Inconsistent" ~ 1,
PerformanceReview == "Met Expectations" ~ 2,
PerformanceReview == "Exceed Expectations" ~ 3
),
Satisfaction_Score = case_when(
SatisfactionScore == "Detractor" ~ 1,
SatisfactionScore == "Passive" ~ 2,
SatisfactionScore == "Promoter" ~ 3
),
Job_Role_Satisfaction_Score = case_when(
JobRole_SatisfactionScore == "Detractor" ~ 1,
JobRole_SatisfactionScore == "Passive" ~ 2,
JobRole_SatisfactionScore == "Promoter" ~ 3
))
# removing unnecessary variables
employee <- employee %>%
select(-EmployeeID, -PotentialReview, -PerformanceReview, -SatisfactionScore,
-JobRole_SatisfactionScore)
summary(employee)
glimpse(employee)
# check this has worked
sum(is.na(employee))
# moving overall satisfaction score to beginning of dataset
employee <- employee %>%
relocate(Overall_SatisfactionScore)
# minor cleaning -- removing variables due to plots & nature of study
employee <- employee %>%
select(-`EducationTypeBio-technology`, -EducationTypeEconomics,
-`EducationTypeMarketing / Finance`, -`EducationTypePhycology / Behavior Sciences`,
-MaritalStatus)
employee_factor <- employee_factor %>%
select(-EmployeeID, -Education, -EducationType, -MaritalStatus)
# set seed for reproducibility within resampling
set.seed(5432)
# 70% of data randomly sampled into training
train_index <- sample(nrow(employee_factor), 0.7 * nrow(employee_factor))
# creating train & test subset
train <- employee_factor[train_index, ]
test <- employee_factor[-train_index, ]
# trying other classification methods
## Fit a Logistic Regression
log.fit <- glm(Overall_SatisfactionScore ~ .,
family = "binomial",
data = train)
summary(log.fit)
## Make predictions, check accuracy
train$prob <- predict(log.fit, newdata = train, type = "response")
train$pred <- ifelse(train$prob > 0.5, 1 , 0)
table(train$pred, train$Overall_SatisfactionScore)  # Check the counts
prop.table(table(train$pred, train$Overall_SatisfactionScore))  # Check the proportions
# How would we apply this to test data?
test$prob <- predict(log.fit, newdata = test, type = "response")
test$pred <- ifelse(test$prob > 0.5, 1 , 0)
table(test$pred)
## LDA
lda.fit <- lda(Overall_SatisfactionScore ~ ., data = train)
library(MASS)
## LDA
lda.fit <- lda(Overall_SatisfactionScore ~ ., data = train)
lda.fit
## Predicting training results
train.pred.lda <- predict(lda.fit, data = train)
table(Predicted = train.pred.lda$class, Survived = train$Survived)
table(Predicted = train.pred.lda$class, Satisfied = train$Overall_SatisfactionScore)
table(Predicted = train.pred.lda$class, Actual = train$Overall_SatisfactionScore)
## QDA
qda.fit <- qda(Overall_SatisfactionScore ~ ., data = train)
qda.fit
## Predicting training results
train.pred.qda <- predict(qda.fit, data = train)
table(Predicted = train.pred.qda$class, Actual = train$Overall_SatisfactionScore)
# trying other classification methods
## Fit a Logistic Regression
log.fit <- glm(Overall_SatisfactionScore ~ .,
family = "binomial",
data = employee_factor)
summary(log.fit)
# trying other classification methods
## Fit a Logistic Regression
log.fit <- glm(Overall_SatisfactionScore ~ .,
family = "binomial",
data = train)
summary(log.fit)
rf <- randomForest(factor(Overall_SatisfactionScore)~.,
data=train,
ntree=500,
mtry=5,
type='classification')
rf
view(rf)
plot(rf)
# random forest
rf_model <- randomForest(Overall_SatisfactionScore ~ .,
data = train,
ntree = 300)
rf_model
# decision tree
tree_model <- tree(Overall_SatisfactionScore ~ ., data = train)
tree_modelx
tree_model
plot(tree_model)
text(tree_model, pretty = 0)
text(tree_model, pretty = 1)
text(tree_model, pretty = 0)
plot(tree_model)
text(tree_model, pretty = 0)
# decision tree
tree_model <- tree(Overall_SatisfactionScore ~ ., data = train)
# decision tree summary & plot
summary(tree_model)
tree_model
plot(tree_model)
text(tree_model, pretty = 0)
# load in data
employee <- read.csv("employee_dataset.csv", sep = ";")
## UNDERSTANDING VARIABLE OF INTEREST
# see how many of each satisfaction score
employee %>%
group_by(Overall_SatisfactionScore) %>%
count()
# filtering out passive responses
employee <- employee %>%
filter(Overall_SatisfactionScore == 'Detractor' |
Overall_SatisfactionScore == 'Promoter')
# change data to factors
employee_factor <- employee %>%
mutate_if(is.character,as.factor)
summary(employee_factor)
glimpse(employee_factor)
# change our variable of interest into a dummy
employee$Overall_SatisfactionScore <-
ifelse(employee$Overall_SatisfactionScore == "Promoter", 1, 0)
# changing gender to dummy
employee$Gender <- ifelse(employee$Gender == "Male", 1, 0)
# one hot encode department, travel type, education data
employee <- cbind(employee[, -which(names(employee) == 'Department')],
model.matrix(~Department-1, employee))
employee <- cbind(employee[, -which(names(employee) == 'Traveltype_last_year')],
model.matrix(~Traveltype_last_year-1, employee))
employee <- cbind(employee[, -which(names(employee) == 'EducationType')],
model.matrix(~EducationType-1, employee))
# creating new ordered numerical variables for marital, education
# reviews & satisfaction scores
employee <- employee %>%
mutate(Education = case_when(
Education == "Under Graduation" ~ 1,
Education == "Graduation" ~ 2,
Education == "Masters / PHD" ~ 3,
),
MaritalStatus = case_when(
MaritalStatus == "Single" ~ 1,
MaritalStatus == "Married" ~ 2,
MaritalStatus == "Divorced" ~ 3,
),
Potential_Review = case_when(
PotentialReview == "Low" ~ 1,
PotentialReview == "Medium" ~ 2,
PotentialReview == "High" ~ 3,
PotentialReview == "Very High" ~ 4
),
Performance_Review = case_when(
PerformanceReview == "Inconsistent" ~ 1,
PerformanceReview == "Met Expectations" ~ 2,
PerformanceReview == "Exceed Expectations" ~ 3
),
Satisfaction_Score = case_when(
SatisfactionScore == "Detractor" ~ 1,
SatisfactionScore == "Passive" ~ 2,
SatisfactionScore == "Promoter" ~ 3
),
Job_Role_Satisfaction_Score = case_when(
JobRole_SatisfactionScore == "Detractor" ~ 1,
JobRole_SatisfactionScore == "Passive" ~ 2,
JobRole_SatisfactionScore == "Promoter" ~ 3
))
# removing unnecessary variables
employee <- employee %>%
select(-EmployeeID, -PotentialReview, -PerformanceReview, -SatisfactionScore,
-JobRole_SatisfactionScore)
summary(employee)
glimpse(employee)
# check this has worked
sum(is.na(employee))
# moving overall satisfaction score to beginning of dataset
employee <- employee %>%
relocate(Overall_SatisfactionScore)
# minor cleaning -- removing variables due to plots & nature of study
employee <- employee %>%
select(-`EducationTypeBio-technology`, -EducationTypeEconomics,
-`EducationTypeMarketing / Finance`, -`EducationTypePhycology / Behavior Sciences`,
-MaritalStatus)
employee_factor <- employee_factor %>%
select(-EmployeeID, -Education, -EducationType, -MaritalStatus)
# minor cleaning -- removing variables due to plots & nature of study
employee <- employee %>%
select(-`EducationTypeBio-technology`, -EducationTypeEconomics,
-`EducationTypeMarketing / Finance`, -`EducationTypePhycology / Behavior Sciences`,
-MaritalStatus)
employee_factor <- employee_factor %>%
select(-EmployeeID, -Education, -EducationType, -MaritalStatus)
# load libraries
library(dplyr)
library(tidyverse)
library(gridExtra)      # for boxplot arrangement
library(reshape2)       # for correlation plot
library(tree)
library(randomForest)
library(boot)
library(gbm)
library(MASS)
# load in data
employee <- read.csv("employee_dataset.csv", sep = ";")
## UNDERSTANDING VARIABLE OF INTEREST
# see how many of each satisfaction score
employee %>%
group_by(Overall_SatisfactionScore) %>%
count()
# filtering out passive responses
employee <- employee %>%
filter(Overall_SatisfactionScore == 'Detractor' |
Overall_SatisfactionScore == 'Promoter')
# change data to factors
employee_factor <- employee %>%
mutate_if(is.character,as.factor)
summary(employee_factor)
glimpse(employee_factor)
# change our variable of interest into a dummy
employee$Overall_SatisfactionScore <-
ifelse(employee$Overall_SatisfactionScore == "Promoter", 1, 0)
# changing gender to dummy
employee$Gender <- ifelse(employee$Gender == "Male", 1, 0)
# one hot encode department, travel type, education data
employee <- cbind(employee[, -which(names(employee) == 'Department')],
model.matrix(~Department-1, employee))
employee <- cbind(employee[, -which(names(employee) == 'Traveltype_last_year')],
model.matrix(~Traveltype_last_year-1, employee))
employee <- cbind(employee[, -which(names(employee) == 'EducationType')],
model.matrix(~EducationType-1, employee))
# creating new ordered numerical variables for marital, education
# reviews & satisfaction scores
employee <- employee %>%
mutate(Education = case_when(
Education == "Under Graduation" ~ 1,
Education == "Graduation" ~ 2,
Education == "Masters / PHD" ~ 3,
),
MaritalStatus = case_when(
MaritalStatus == "Single" ~ 1,
MaritalStatus == "Married" ~ 2,
MaritalStatus == "Divorced" ~ 3,
),
Potential_Review = case_when(
PotentialReview == "Low" ~ 1,
PotentialReview == "Medium" ~ 2,
PotentialReview == "High" ~ 3,
PotentialReview == "Very High" ~ 4
),
Performance_Review = case_when(
PerformanceReview == "Inconsistent" ~ 1,
PerformanceReview == "Met Expectations" ~ 2,
PerformanceReview == "Exceed Expectations" ~ 3
),
Satisfaction_Score = case_when(
SatisfactionScore == "Detractor" ~ 1,
SatisfactionScore == "Passive" ~ 2,
SatisfactionScore == "Promoter" ~ 3
),
Job_Role_Satisfaction_Score = case_when(
JobRole_SatisfactionScore == "Detractor" ~ 1,
JobRole_SatisfactionScore == "Passive" ~ 2,
JobRole_SatisfactionScore == "Promoter" ~ 3
))
# removing unnecessary variables
employee <- employee %>%
select(-EmployeeID, -PotentialReview, -PerformanceReview, -SatisfactionScore,
-JobRole_SatisfactionScore)
summary(employee)
glimpse(employee)
# check this has worked
sum(is.na(employee))
# moving overall satisfaction score to beginning of dataset
employee <- employee %>%
relocate(Overall_SatisfactionScore)
# minor cleaning -- removing variables due to plots & nature of study
employee <- employee %>%
select(-`EducationTypeBio-technology`, -EducationTypeEconomics,
-`EducationTypeMarketing / Finance`, -`EducationTypePhycology / Behavior Sciences`,
-MaritalStatus)
employee_factor <- employee_factor %>%
select(-EmployeeID, -Education, -EducationType, -MaritalStatus)
employee_factor <- employee_factor %>%
select(-EmployeeID, -Education, -EducationType, -MaritalStatus)
View(employee)
View(employee)
# removing unnecessary variables
employee <- employee %>%
select(-EmployeeID, -PotentialReview, -PerformanceReview, -SatisfactionScore,
-JobRole_SatisfactionScore)
